---
title: "CoVPN Screening Registry Analysis"
output:
  word_document: default
  html_document:
    theme: yeti
    highlight: tango
    toc: no
    toc_float: no
  pdf_document: default
---

__Date generated:__ `r format(Sys.time(), '%B %d, %Y')` 

__By:__ Blythe Adamson, blythejane@gmail.com 

__Collaborators:__ James Kublin, Neil Abernethy, Abigail Orlando

```{r global_options, include=FALSE}

############ GLOBAL VARIABLES ############

knitr::opts_chunk$set(fig.width = 8,
                      fig.height = 5,
                      fig.align = "center",
                      warning = FALSE,
                      message = FALSE,
                      echo = FALSE)

options(scipen=999)

options(ore.warn.order=FALSE)

# Weights for total cumulative exposure risk score 
beta_home <- .3
beta_work <- .4
beta_community <- 1 - beta_home - beta_work
w_clinical <- 0.2               # weight of symptoms contributing to total endpoint score

# Exposure odds ratios
or_risky_home <- 5.0
or_school_childcare <- 3.0
or_caregiver <- 1.3
or_partner_job <- 1.5
or_job_risk_high <- 2.0
or_job_risk_low <- 0.5
or_wfh <- 0.1                   # only working from home vs some in-person work
or_work_unsafe_distance <- 2.0
or_work_unsafe_masks <- 2.0
or_indoor_gathering <- 1.5

# percentage point additive increase attributable to source
pp_smaller_social <- 0.25       # interactions 1-10 vs >10
pp_smaller_gathering <- 0.5     # gathering <20 vs >20
pp_social_intxn_over10 <- 0.9
pp_gathering_over20 <- 0.9
pp_freq_visitors <- 0.2 # daily or weekly visitors

# Clinical risk odds ratios
# Probability of showing symptoms if infected
p_clinical_age18 <- 0.33 # Source: Davies et al Nature Med 2020
p_clinical_age40 <- 0.40 # Source: Davies et al Nature Med 2020
p_clinical_age50 <- 0.49 # Source: Davies et al Nature Med 2020
p_clinical_age60 <- 0.63 # Source: Davies et al Nature Med 2020
p_clinical_age70 <- 0.69 # Source: Davies et al Nature Med 2020
p_clinical_age80 <- 0.69 # Source: Davies et al Nature Med 2020

# increased risk of showing symptoms if infected
or_race_black <- 5
or_hispanic <- 5
or_bmi_overweight <- 1.5
or_bmi_obese <- 3
or_comorbidity_n <- 1.6 #Source: Cover risk score
or_cancer <- 3 #source: cover risk score

ids_variable_names <- c('md_ethnicity_ids', 'occ_jobs_ids', 'ws_work_transportation_ids',
          'ls_dwellings_ids', 'ls_cohab_jobs_ids', 'css_current_symptoms_ids',
          'css_pre_existing_cond_ids')

or_cols = c("beta_home", "beta_work", "w_clinical",
            "or_risky_home", "or_school_childcare", "or_partner_job",
            "or_job_risk_high", "or_job_risk_low", "or_wfh",
            "or_work_unsafe_distance", "or_work_unsafe_masks",
            "p_clinical_age18", "p_clinical_age40", "p_clinical_age50", "p_clinical_age60",
            "p_clinical_age70","p_clinical_age80", "or_race_black", "or_hispanic", 
            "or_bmi_overweight", "or_bmi_obese", "or_comorbidity_n",
            "or_cancer", "or_caregiver", "or_indoor_gathering")


# dictionary of lower, upper, and current values for each OR variable
or_dict <- data.frame(variable_name=or_cols, 
                      lower_bound=c(0.1, 0.1, 0.1, 
                                    1.0, 1.0, 1.0, 
                                    1.0, 0.01, 0.01, 
                                    1.0, 1.0, 
                                    0.3, 0.3, 0.3, 0.3, 
                                    0.3, 0.3, 1.0, 1.0, 
                                    1.0, 1.0, 1.0, 
                                    1.0, 1.0, 1.0),
                      upper_bound=c(0.8, 0.8, 1.0,
                                    10.0, 5.0, 5.0, 
                                    5.0, 1.0, 1.0, 
                                    5.0, 5.0, 
                                    1.0, 1.0, 1.0, 1.0,
                                    1.0, 1.0, 10.0, 10.0,
                                    5.0, 10.0, 20.0,
                                    10.0, 5.0, 10.0),
                      stringsAsFactors = FALSE)

```

```{r setup, include=FALSE}
library(ORE)
library(compareGroups)
library(knitr)
library(reticulate)
library(plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(kableExtra)
library(lubridate)
library(readr)
library(scales)
library(stringr)
library(survminer)
library(Hmisc)
```

# Background
The mission of the COVID-19 Prevention Network (CoVPN) is to conduct Phase 3 
efficacy trials for COVID-19 vaccines and monoclonal antibodies. The CoVPN 
is working to develop and conduct studies to ensure rapid and thorough evaluation 
of US government-sponsored COVID-19 vaccines for the prevention of COVID-19 
disease. The purpose of the CoVPN Screening Registry is to create a list of 
potential volunteers who want to take part in current or future COVID-19 
prevention clinical trials. You must be 18 years or older to participate. 
Participation involves completing a short online survey that includes some 
personal questions. Participation is voluntary.

A major and critical need for the field is the ability to provide some level of 
confidence in predicting individual risk for infection and disease based on a 
survey of demographic detail, e.g. CoVPN registry. If clinical trial sites can 
easily identify and enroll patients who are most likely to become an endpoint, 
the pre-specified count of endpoints needed for trial completion will be 
reached sooner and sufficient evidence will be available sooner for the FDA 
to evaluate vaccine efficacy. 

__Research Question:__ _What is the likelihood that an individual in the CoVPN volunteer screening registry will become infected with SARS-CoV-2 and develop symptomatic COVID disease in the next 3 months?_

<br>

# Methods

### Study population
The population of interest is people in the United States who have expressed 
willingness to participate in COVID-19 vaccine clinical trials and who 
completed an online Volunteer Screening Form and are included in the CoVPN Screening Registry. 

### Study design
This project aims to design an endpoint risk model to be applied to the 
CoVPN Screening Registry using an evidence synthesis of published studies 
and publicly available data sources. 

### Data provenance
The main data source is the CoVPN Vaccine Trial Screening Registry powered by Oracle APEX.
The online survey form with all questions is available 
[here](https://coronaviruspreventionnetwork.org/clinical-study-volunteer/). 
Key model inputs from literature review and expert opinion are presented below. 
Risk ratios in the linear exposure model modify the intensity of an exposure in 
reference to an average of similar type. 
The assumed baseline probability of showing symptoms for an infected person 
age 50-59 was `r p_clinical_age50`, for someone with normal weight who is 
non-Black race, non-Hispanic, has no comorbidities, and no history of cancer. 


###### __Table 1.__ Key model inputs

Contribution of category | Weight | Reference
----------------------|------------|----------------
Home weight to cumulative exposure | `r beta_home` | Expert opinion
Work weight to cumulative exposure | `r beta_work`| Expert opinion
Community weight to cumulative exposure | `r beta_community`| Expert opinion
Clinical scaling factor to Endpoint Risk Score | `r w_clinical`| Expert opinion

<br>

Inputs in exposure model | Risk Ratio | Reference
----------------------|------------|----------------
Relative risk from risky household setting compared to average setting (i.e., dorm or nursing home) | `r or_risky_home` | Expert opinion 
Relative risk of child in household returning to school or childcare in 2020 compared to a child not returning to school | `r or_school_childcare`| Expert opinion
Relative risk of in-home caregiver | `r or_caregiver` | expert opinion
Relative risk from house-mate risky job compared to average job | `r or_partner_job`| Expert opinion 
Relative Risk from working in high risk job compared to average job risk | `r or_job_risk_high`| Expert opinion 
Relative Risk from orking in lower risk job compared to average job risk | `r or_job_risk_low`| Expert opinion 
Relative risk of only working only from home compared to some in-person work | `r or_wfh`| Expert opinion 
Relative risk of indoor gathering compared to outdoor gathering | `r or_indoor_gathering`| Expert opinion 

<br>

Variables in clinical symptoms model | Value | Reference
----------------------|------------|----------------
Probability of symptoms if infected, age 18-<40 | `r p_clinical_age18` | Davies et al
Probability of symptoms if infected, age 40-<50 | `r p_clinical_age40` | Davies et al
Probability of symptoms if infected, age 50-<60 | `r p_clinical_age50` | Davies et al
Probability of symptoms if infected, age 60-<70 | `r p_clinical_age60` | Davies et al
Probability of symptoms if infected, age 70-<80 | `r p_clinical_age70` | Davies et al
Probability of symptoms if infected, age 80+ | `r p_clinical_age80` | Davies et al
Relative risk for Black race | `r or_race_black`  | Expert opinion
Relative risk for Hispanic or LatinX | `r or_hispanic`| Expert opinion
Relative risk for overweight compared to normal BMI | `r or_bmi_overweight`| Expert opinion
Relative risk for obese compared to normal BMI| `r or_bmi_obese` | Expert opinion
Relative risk for no. of comorbidities | `r or_comorbidity_n`  | Cover risk score
Relative risk for history of recent cancer treatment | `r or_cancer` | Cover risk score

<small>*Reference groups: non-black race is the reference group for race and 
non-Hispanic, non-LatinX is the reference group for Hispanic or LatinX, 
normal or underweight BMI is the reference group for BMI categories. 
Abbreviations: BMI, body mass index.</small>


```{r gather data}
response_raw <- ore.pull(SURVEY_RESPONSES_PIVOT_MV)

question <- ore.pull(QUESTION_VALUES)

names(response_raw) <- tolower(names(response_raw))

names(question) <- tolower(names(question))
```


```{r functions}

MakeDummyNames <- function(v, prefix = '') {
  # Make the variable names needed for all dummy variables needed in the analysis
  # 
  # Args:
  #   @v: ???
  #   @prefix: ???
  #
  # Returns: vector of dummy variable names
  s <- sort(unique(v))
  d <- outer(v, s, function(v, s) 1L * (v == s))
  colnames(d) <- paste0(prefix, s)
  d
}

MakeDummyVariables <- function(df, cols) {
  # Make the dummy variables for CoVPN survey response data
  # 
  # Args:
  #   @df: ???
  #   @cols: ???
  #
  # Returns: same data frame used as input with dummy variables added as 
  # new columns to the dataset
  for (col in cols) {
    lst <- strsplit(as.character(df[[col]]), split = "\\:")
    k <- lengths(lst)
    FlatColumn <- unlist(lst, use.names = FALSE)
    df2 <- data.frame(survey_response_id = rep.int(df$survey_response_id, k),
                      value = FlatColumn)
    # bind the dummies to the original dataframe
    binded <- cbind(df2, MakeDummyNames(df2$value, prefix = paste(col, "_", sep="")))
    temp <- binded[-2] %>%
      group_by(survey_response_id) %>%
      summarise_each(funs(sum))
    merged <- left_join(df, temp, by = c("survey_response_id" = "survey_response_id"))
    index_new_col <- (ncol(df) + 1):ncol(merged)
    merged[, index_new_col][is.na(merged[, index_new_col])] <- 0
    df <- merged
  }
  
  return(df)
}

CreateBaselineTable <- function(baseline_df, variable){
  # Create a baseline table 1 to describe population characteristics
  # 
  # Args:
  #   @baseline_df: dataframe with one row per person and variables to describe
  #   @variable: categorical variable to stratify the baseline table results
  #
  # Returns: compareGroups formatted table with baseline characteristics of population
  COLUMNS <- c(variable)
  
  baseline_df <- as.data.frame(baseline_df)
  
  #create formula for comparison groups
  FORMULA <- as.formula(paste(COLUMNS, 
                               paste(LOOKUP.T, collapse = " + "),
                               sep = " ~ "))
  
  # Loop through all variables to give them a label to improve formatting in the table
  for (i in 1:length(NAMES)) {
    label(baseline_df[, LOOKUP.T[i]]) <- NAMES[i]
  }
  
  baseline <- compareGroups(FORMULA, 
                            data = baseline_df,
                            max.xlev = 12,
                            max.ylev = 12,
                            #Change method for the continuous variables to output median (IQR)
                            #method = 2
                            )
  
  if(n_distinct(baseline_df[[variable]]) >= 2) {
    table1 <- createTable(baseline,
                          show.p.overall = TRUE,
                          show.all = TRUE,
                          digits = 1)
  } else{
    table1 <- createTable(baseline,
                          show.p.overall = FALSE,
                          show.all = FALSE,
                          digits = 1)
  }
    
  return(table1)
  
}

```



```{r clean and derive features, cache =TRUE}

responses_clean <- MakeDummyVariables(response_raw, ids_variable_names)

############ DERIVED FEATURES  ############

# DERIVED FEATURE: susceptible
check_if_susceptible <- function(x, y){
   is_not_pos <- ifelse((x=='Positive') | (y=='Positive'), 0, 1)
   return(ifelse(is.na(is_not_pos), 1, is_not_pos))
}
responses_clean$susceptible <- mapply(check_if_susceptible, 
                                      responses_clean$crd_rna_test_result, 
                                      responses_clean$crd_anti_test_result)

# DERIVED FEATURE: freq_work
responses_clean$freq_work <- as.numeric(mapvalues(responses_clean$ws_wkpl_freq_id, 
                                      from=c(181,201,202,221),
                                      to=c(0, 1, 3, 5)))
responses_clean$freq_work[is.na(responses_clean$freq_work)] <- 0

# DERIVED FEATURE: any_work
responses_clean <- responses_clean %>% 
  dplyr::mutate(any_work = if_else(occ_working_id == 127, 1, 0, 
                            missing = 0))

# DERIVED FEATURE: freq_work_increase
responses_clean$freq_work_increase <- as.numeric(mapvalues(responses_clean$ws_wkpl_freq_change_est_id, 
                                               from=c(241,242,243,261,262,263,264),
                                               to=c(1,3,4,5,0,0,0)))
responses_clean$freq_work_increase[is.na(responses_clean$freq_work_increase)] <- 0

# DERIVED FEATURE: job_risk_high
# 178:childcare, 161:socialservices, 139:dental, 164:factory, 163:food
# 137:healthworker, 140:personal, 162:protective, 46:transit, 621:tourism
responses_clean <- responses_clean %>% 
  dplyr::mutate(job_risk_high = if_else(occ_jobs_ids %in% 
                                   c(178,161,139,164,163,137,140,162,46,621), 
                                 1, 0, 
                                 missing = 0))

# DERIVED FEATURE: job_low_risk
# 174:architect, 176:art, 131:business, 179:laborer, 165:farmer, 168:grounds
# 132:IT, 134:legal, 136:research, 130:management, 133:office, 171:warehouse
responses_clean <- responses_clean %>% 
  dplyr::mutate(job_risk_low = if_else(occ_jobs_ids %in% 
                                   c(174,176,131,179,165,168,132,134,136,130,133,171), 
                                 1, 0, 
                                 missing = 0))

# Categorical variable for stratification in descriptive tables and figures
responses_clean <- responses_clean %>% 
  dplyr::mutate(job_risk_cat = if_else(job_risk_high == 1, "High",
                                if_else(job_risk_low == 1, "Low", 
                                        "Average")))

# DERIVED FEATURE: n_work_interactions
responses_clean$n_work_interactions <- as.numeric(mapvalues(responses_clean$ws_work_interactions_dy_id, 
                                                from=c(583,584,585,586,587),
                                                to=c(0,1,2,3,4)))
responses_clean$n_work_interactions[is.na(responses_clean$n_work_interactions)] <- 0

# DERIVED FEATURE: n_transit_methods
gen_n_transit_methods <- function(df){
   n_transit_methods <- sum(as.numeric(df["ws_work_transportation_ids_285"]),
                            as.numeric(df["ws_work_transportation_ids_285"]),
                            as.numeric(df["ws_work_transportation_ids_286"]),
                            as.numeric(df["ws_work_transportation_ids_287"]),
                            as.numeric(df["ws_work_transportation_ids_288"]),
                            as.numeric(df["ws_work_transportation_ids_289"]),
                            as.numeric(df["ws_work_transportation_ids_290"]))
   return(n_transit_methods)
}
responses_clean$n_transit_methods <- apply(responses_clean, 1, gen_n_transit_methods)

# DERIVED FEATURE: wfh_only
gen_wfh_only <- function(df){
   wfh_only <- ifelse ((df['n_transit_methods']==0 & (as.numeric(df["ws_work_transportation_ids_53"]) == 1)), 1, 0)
   return(wfh_only)
}
responses_clean$wfh_only <- apply(responses_clean, 1, gen_wfh_only)

# DERIVED FEATURE: work_unsafe_distance
responses_clean <- responses_clean %>% 
  dplyr::mutate(work_unsafe_distance = if_else(ws_wkpl_scl_dis_meas_id == 266, 1, 0,
                                        missing = 0))

# DERIVED FEATURE: work_unsafe_masks
responses_clean <- responses_clean %>% 
  dplyr::mutate(work_unsafe_masks = if_else(ws_wkpl_scl_dis_meas_id == 282, 1, 0,
                                        missing = 0))

# DERIVED FEATURE: risky_home_setting
responses_clean$risky_home_setting <- apply(responses_clean[c('ls_dwellings_ids_143', 
                                                              'ls_dwellings_ids_144', 
                                                              'ls_dwellings_ids_145',
                                                            'ls_dwellings_ids_146', 
                                                            'ls_dwellings_ids_148', 
                                                            'ls_dwellings_ids_149',
                                                            'ls_dwellings_ids_150', 
                                                            'ls_dwellings_ids_153')], 
                                            1, max)
responses_clean$risky_home_setting[is.na(responses_clean$risky_home_setting)] <- 0


# DERIVED FEATURE: n_home_young
responses_clean <- responses_clean %>% 
  dplyr::mutate(n_home_young = if_else(ls_cohab_under_18 > 8, 8, ls_cohab_under_18,
                                missing = 0))

# DERIVED FEATURE: n_home_middle
responses_clean <- responses_clean %>% 
  dplyr::mutate(n_home_middle = if_else(ls_cohab_btw_18_64 > 8, 8, ls_cohab_btw_18_64,
                                missing = 0))

# DERIVED FEATURE: n_home_older
responses_clean <- responses_clean %>% 
  dplyr::mutate(n_home_older = if_else(ls_cohab_over_64 > 8, 8, ls_cohab_over_64,
                                missing = 0))


# DERIVED FEATURE: n_home_total
responses_clean <- responses_clean %>% 
  dplyr::mutate(n_home_total = n_home_young + n_home_middle + n_home_older + 1)

# DERIVED FEATURE: home_schoolreturn
responses_clean <- responses_clean %>% 
  dplyr::mutate(home_schoolreturn = if_else(ls_cohab_exp_rtn_sch_id == 381, 1, 0,
                                missing = 0))

# DERIVED FEATURE: outside_childcare
responses_clean <- responses_clean %>% 
  dplyr::mutate(outside_childcare = if_else(ls_cohab_in_sch_or_cc >= 3, 3, 
                                            ls_cohab_in_sch_or_cc,
                                missing = 0))

# DERIVED FEATURE: high_partner_risk
responses_clean$high_partner_risk <- apply(responses_clean[c('ls_cohab_jobs_ids_317', 
                                                             'ls_cohab_jobs_ids_160', 
                                                             'ls_cohab_jobs_ids_158',
                                                              'ls_cohab_jobs_ids_303', 
                                                             'ls_cohab_jobs_ids_302', 
                                                             'ls_cohab_jobs_ids_326',
                                                              'ls_cohab_jobs_ids_159', 
                                                             'ls_cohab_jobs_ids_301', 
                                                             'ls_cohab_jobs_ids_47',
                                                              'ls_cohab_jobs_ids_623')], 
                                           1, max)
responses_clean$high_partner_risk[is.na(responses_clean$high_partner_risk)] <- 0

# DERIVED FEATURE: caregiver
responses_clean$caregiver = ifelse((responses_clean$ls_cohab_over_64 + 
                                     responses_clean$ls_cohab_under_18) >= 1 & 
                                     (responses_clean$ws_work_transportation_ids_53 > 0 | #works from home
                                        responses_clean$occ_jobs_ids_180 > 0 | # Home Based Business or Stay-at-Home Caregiver
                                        responses_clean$ws_wkpl_freq_id == 181), 1, 0) 
responses_clean$caregiver[is.na(responses_clean$caregiver)] <- 0

# DERIVED FEATURE: freq_visitors
# 361:daily, 362:weekly; 363:monthly
responses_clean$freq_visitors = as.numeric(as.character((
  mapvalues(responses_clean$ci_home_visitor_freq_id, 
            from=c(48,49,361,362,363,364),
            to=c(0,0,2,1,0,0)))))
responses_clean$freq_visitors[is.na(responses_clean$freq_visitors)] <- 0

# DERIVED FEATURE: social_gathering
responses_clean$social_gathering = sapply(responses_clean$ci_gatherings_last_2w_id, 
                                          function(x) if_else(x == 341, 1, 0))
responses_clean$social_gathering[is.na(responses_clean$social_gathering)] <- 0

# DERIVED FEATURE: n_social_intxn
# use midpoint of range in each category
responses_clean$n_social_intxn <- as.numeric(as.character(
  mapvalues(responses_clean$ci_interactions_dy_id, 
            from=c(588,589,590,591,592),
            to=as.numeric(c(0,5,20,40,75)))))
responses_clean$n_social_intxn[is.na(responses_clean$n_social_intxn)] <- 0

# DERIVED FEATURE: n_gathering
# use midpoint of range in each category
responses_clean$n_gathering <- as.numeric(as.character(
  mapvalues(responses_clean$ci_gatherings_people_id,
  from=c(343,344,345,346),
  to=c(15,35,150,300))))
responses_clean$n_gathering[is.na(responses_clean$n_gathering)] <- 0

# DERIVED FEATURE: indoor_gathering
# 347:indoor, 601:indoor or outdoor, 348:outdoor
responses_clean <- responses_clean %>% 
  dplyr::mutate(indoor_gathering = if_else(ci_gatherings_location_id %in% c(347, 601), 1, 0,
                                   missing = 0))

# DERIVED FEATURE: any_social_risk
responses_clean <- responses_clean %>% 
  dplyr::mutate(any_social_risk = if_else(social_gathering == 1, 1, 
                                   if_else(n_social_intxn > 0, 1, 0, missing = 0), 
                                   missing = 0))

# DERIVED FEATURES: social_intxn_bw_1to10; social_intx_over10; gathering_bw_10to20; gathering_over20; social_risk_high
# typical day interactions outside of work 589:1-10; 590:11-30; 591:31-50; 592:>50
# largest social gathering size in past two weeks 343:10-20; 344:21-30; 345:51-250; 346:>250
responses_clean <- responses_clean %>% 
  dplyr::mutate(social_intxn_bw_1to10 = if_else(ci_interactions_dy_id == 589, 1, 0, missing = 0),
                social_intxn_over10 = if_else(ci_interactions_dy_id %in% c(590, 591, 592), 1, 0, missing = 0),
                gathering_bw_10to20 = if_else(ci_gatherings_people_id == 343, 1, 0, missing = 0),
                gathering_over20 = if_else(ci_gatherings_people_id %in% c(344, 345, 346), 1, 0, missing = 0),
                social_risk_high = if_else(social_intxn_over10 == 1 | 
                                             gathering_over20 == 1, 1, 0, 
                                           missing = 0))

# DERIVED FEATURE: travel_plane
responses_clean$travel_plane <- responses_clean$ws_work_transportation_ids_290
responses_clean$travel_plane[is.na(responses_clean$travel_plane)] <- 0
   
# DERIVED FEATURE: travel_bus
responses_clean$travel_bus <- responses_clean$ws_work_transportation_ids_287
responses_clean$travel_bus[is.na(responses_clean$travel_bus)] <- 0

# DERIVED FEATURE: travel_train
responses_clean$travel_train <- responses_clean$ws_work_transportation_ids_288
responses_clean$travel_train[is.na(responses_clean$travel_train)] <- 0

# DERIVED FEATURE: travel_public_transit
# 287:bus, 288:train, 290:plane
responses_clean$travel_public_transit <- if_else(responses_clean$ws_work_transportation_ids_287 + 
                                                   responses_clean$ws_work_transportation_ids_288 +
                                                   responses_clean$ws_work_transportation_ids_290 >=1,
                                                 1, 0, missing = 0)

# DERIVED FEATURES: age_18, age_40, age_50, age_60, age_70, age_80
responses_clean <- responses_clean %>% 
  dplyr::mutate(age_18 = if_else(md_age < 40, 1, 0, missing = 0),
         age_40 = if_else(md_age >= 40 & md_age < 50, 1, 0, missing = 0),
         age_50 = if_else(md_age >= 50 & md_age < 60, 1, 0, missing = 0),
         age_60 = if_else(md_age >= 60 & md_age < 70, 1, 0, missing = 0),
         age_70 = if_else(md_age >= 70 & md_age < 80, 1, 0, missing = 0),
         age_80 = if_else(md_age >= 80, 1, 0, missing = 0))

# DERIVED FEATURE: age_over65
responses_clean$age_over65 <- as.factor(if_else(responses_clean$md_age >= 65, "Age >=65", "Age <65"))

### CATEGORICAL TO DESCRIBE POPULATION IN BASELINE TABLE
responses_clean <- responses_clean %>% 
  dplyr::mutate(age_cat = 0,
                age_cat = ifelse(age_18 == 1, "18-39",
                          age_cat),
                age_cat = ifelse(age_40 == 1, "40-49",
                          age_cat), 
                age_cat = ifelse(age_50 == 1, "50-59",
                          age_cat), 
                age_cat = ifelse(age_60 == 1, "60-69",
                          age_cat), 
                age_cat = ifelse(age_70 == 1, "70-79",
                          age_cat), 
                age_cat = ifelse(age_80 == 1, "80+",
                          age_cat),
                age_cat = ordered(age_cat, levels = c("18-39", '40-49', 
                                                      '50-59', '60-69',
                                                      '70-79', '80+')),
                age = md_age,
                age = if_else(md_age >85, 85, md_age))

# DERIVED FEATURE: race_black
responses_clean$race_black <- responses_clean$md_ethnicity_ids_40
responses_clean$race_black[is.na(responses_clean$race_black)] <- 0

# DERIVED FEATURE: hispanic
responses_clean$hispanic <- responses_clean$md_ethnicity_ids_43
responses_clean$hispanic[is.na(responses_clean$hispanic)] <- 0

# DERIVED FEATURE: kg
responses_clean$kg <- sapply(responses_clean$md_weight, 
                             function(x) x*0.453592)
responses_clean$kg[is.na(responses_clean$kg)] <- 0

# DERIVED FEATURE: meters
gen_meters <- function(x, y){
   return((as.numeric(x)*12 + as.numeric(y))*0.0254)
}
responses_clean$meters <- mapply(gen_meters, 
                                 responses_clean$md_height_ft, 
                                 responses_clean$md_height_in)
responses_clean$meters[is.na(responses_clean$meters)] <- 0

# DERIVED FEATURE: bmi
gen_bmi <- function(x, y){000
   return(x/(y^2))
}
responses_clean$bmi <- mapply(gen_bmi, 
                              responses_clean$kg, 
                              responses_clean$meters)
responses_clean$bmi[is.na(responses_clean$bmi)] <- 0

# DERIVED FEATURE: bmi_overweight
responses_clean$bmi_overweight <- sapply(responses_clean$bmi, 
                                         function(x) ifelse(x>=25 & x<30, 1, 0))
responses_clean$bmi_overweight[is.na(responses_clean$bmi_overweight)] <- 0

# DERIVED FEATURE: bmi_obese
responses_clean$bmi_obese <- sapply(responses_clean$bmi, 
                                    function(x) ifelse(x>=30, 1, 0))
responses_clean$bmi_obese[is.na(responses_clean$bmi_obese)] <- 0

# DERIVED FEATURE: co_asthma
responses_clean$co_asthma <- responses_clean$css_pre_existing_cond_ids_549
responses_clean$co_asthma[is.na(responses_clean$co_asthma)] <- 0

# DERIVED FEATURE: co_cancer_hx
responses_clean$co_cancer_hx <- responses_clean$css_pre_existing_cond_ids_560
responses_clean$co_cancer_hx[is.na(responses_clean$co_cancer_hx)] <- 0

# DERIVED FEATURE: cancer
responses_clean$cancer <- responses_clean$css_pre_existing_cond_ids_561
responses_clean$cancer[is.na(responses_clean$cancer)] <- 0

# DERIVED FEATURE: comorbidity_n
responses_clean$comorbidity_n <- apply(responses_clean[c("css_pre_existing_cond_ids_1",
                                                         "css_pre_existing_cond_ids_2",
                                                         "css_pre_existing_cond_ids_3",
                                                         "css_pre_existing_cond_ids_4",
                                                         "css_pre_existing_cond_ids_547",
                                                         "css_pre_existing_cond_ids_548",
                                                         "css_pre_existing_cond_ids_549",
                                                         "css_pre_existing_cond_ids_550",
                                                         "css_pre_existing_cond_ids_551",
                                                         "css_pre_existing_cond_ids_552",
                                                         "css_pre_existing_cond_ids_554",
                                                         "css_pre_existing_cond_ids_555",
                                                         "css_pre_existing_cond_ids_556",
                                                         "css_pre_existing_cond_ids_557",
                                                         "css_pre_existing_cond_ids_558",
                                                         "css_pre_existing_cond_ids_559",
                                                         "css_pre_existing_cond_ids_560",
                                                         "css_pre_existing_cond_ids_561",
                                                         "css_pre_existing_cond_ids_562",
                                                         "css_pre_existing_cond_ids_563",
                                                         "css_pre_existing_cond_ids_564",
                                                         "css_pre_existing_cond_ids_565",
                                                         "css_pre_existing_cond_ids_566",
                                                         "css_pre_existing_cond_ids_567",
                                                         "css_pre_existing_cond_ids_568",
                                                         "css_pre_existing_cond_ids_569",
                                                         "css_pre_existing_cond_ids_570",
                                                         "css_pre_existing_cond_ids_81",
                                                         "css_pre_existing_cond_ids_82",
                                                         "css_pre_existing_cond_ids_83")], 
                                       1, sum)
responses_clean$comorbidity_n[is.na(responses_clean$comorbidity_n)] <- 0

responses_clean <- responses_clean %>% 
  mutate(comorbidity_n = if_else(comorbidity_n >=5, 5, comorbidity_n))

```



```{r calculate risk scores}

run_model <- function(data, risk_ratio_variable=NULL, risk_ratio_value=NULL){
  # Calculates the risk scores for each patient based on survey results and 
  # risk ratios or odds ratios defined as model inputs. Can be used for main
  # analysis with options set to NULL or options can be used to define 
  # sensitivity analysis
  # 
  # Args:
  #   @data: Dataframe with cleaned responses to the survey and all derived variables
  #   @risk_ratio_variable: vector of character strings that are the names of the odds ratios used in the model
  #   @risk_ratio_value: the value
  #
  # Returns: list of 4 data frames named exposures, clinical, score_summary, 
  # and response_predictions where response_predictions is the same as Arg data 
  # response_clean with scores added as new columns
  
   if(!is.null(risk_ratio_variable) & !is.null(risk_ratio_value)) {
      if (risk_ratio_variable %in% or_cols){
         # temporarily overwrite variable
         assign(risk_ratio_variable, risk_ratio_value)
      }
      else {
         data[risk_ratio_variable] <- risk_ratio_value
      }
   }

  alpha_clinical_age18 <- log(p_clinical_age18/(1- p_clinical_age18))
  alpha_clinical_age40 <- log(p_clinical_age40/(1- p_clinical_age40))
  alpha_clinical_age50 <- log(p_clinical_age50/(1- p_clinical_age50))
  alpha_clinical_age60 <- log(p_clinical_age60/(1- p_clinical_age60))
  alpha_clinical_age70 <- log(p_clinical_age70/(1- p_clinical_age70))
  alpha_clinical_age80 <- log(p_clinical_age80/(1- p_clinical_age80))
  
    # Define exposure score
    
    exposures <- data %>% 
      select(sr_guid, susceptible,
             any_work, freq_work, freq_work_increase, 
             n_work_interactions,
             job_risk_high, job_risk_low,
             work_unsafe_distance, work_unsafe_masks,
             wfh_only, n_work_interactions,
             risky_home_setting, high_partner_risk, 
             n_home_young, n_home_middle, n_home_older,
             home_schoolreturn, outside_childcare, caregiver,
             freq_visitors,
             any_social_risk, social_risk_high, indoor_gathering,
             social_intxn_bw_1to10, social_intxn_over10, gathering_bw_10to20, gathering_over20, 
             social_gathering, n_social_intxn, n_gathering, 
             travel_public_transit,
             race_black, hispanic,
             risk_score_cover_h) %>% 
      mutate(full_home_score  = (or_risky_home^risky_home_setting) *
                 (or_caregiver^caregiver) *
               (n_home_young*(or_school_childcare^(home_schoolreturn + outside_childcare)) +
               (n_home_middle + n_home_older)*(or_partner_job^high_partner_risk)
               + freq_visitors),
             score_home = if_else(full_home_score >= 15, 15, full_home_score)/15,
             
             score_community_full = (social_intxn_bw_1to10 * pp_smaller_social
               + (gathering_bw_10to20 * pp_smaller_gathering) * indoor_gathering^or_indoor_gathering
               + social_intxn_over10 * pp_social_intxn_over10
               + gathering_over20 * pp_gathering_over20 * indoor_gathering^or_indoor_gathering
               + freq_visitors * pp_freq_visitors)
               * (or_race_black^race_black) * (or_hispanic^hispanic),
             score_community = if_else(score_community_full > 1, 1, score_community_full, missing = 0),
             
             full_work_score = (freq_work + freq_work_increase)*
                (n_work_interactions + travel_public_transit) *
                (or_job_risk_high^job_risk_high)*
                (or_job_risk_low^job_risk_low)*
                (or_work_unsafe_distance^work_unsafe_distance)*
                (or_work_unsafe_masks^work_unsafe_masks)*
                (or_wfh^wfh_only), 
             score_work = if_else(full_work_score >= 20, 20, 
                                  full_work_score, missing = 0)/20,
             
             score_cumulative_exposure = round((
               beta_home*score_home + 
               beta_work*score_work +
               beta_community*score_community)*100, digits = 0))
      
    score_summary_part1 <- exposures %>% 
      select(sr_guid, susceptible,
             score_home,
             score_community,
             score_work,
             score_cumulative_exposure, 
             risk_score_cover_h)
    
    # Define clinical symptomatic risk score
    
    beta_race_black <- log(or_race_black)
    beta_hispanic <- log(or_hispanic)
    beta_bmi_overweight <- log(or_bmi_overweight)
    beta_bmi_obese <- log(or_bmi_obese)
    beta_comorbidity_n <- log(or_comorbidity_n)
    beta_cancer <- log(or_cancer)
    
    clinical <- data %>% 
      select(sr_guid,
             md_gender, md_age,
             age_18, age_40, age_50, age_60, age_70, age_80, 
             bmi_overweight, bmi_obese,
             race_black, hispanic,
             comorbidity_n, cancer,
             risk_score_cover_h) %>% 
      mutate(logistic = alpha_clinical_age18*age_18 + 
               alpha_clinical_age40*age_40 +
               alpha_clinical_age50*age_50 +
               alpha_clinical_age60*age_60 +
               alpha_clinical_age70*age_70 +
               alpha_clinical_age80*age_80 +
                                 beta_race_black*race_black +
                                 beta_hispanic*hispanic +
                                 beta_bmi_overweight*bmi_overweight +
                                 beta_bmi_obese*bmi_obese + 
                                 beta_comorbidity_n*comorbidity_n + 
                                 beta_comorbidity_n*(comorbidity_n*age_80)^2 +  #intrxn bw age >80 and comorbidities
                                 beta_cancer*cancer,
             p_clinical = exp(logistic) /
               (1 + exp(logistic))) %>% 
      # create control score for comparison using only age
      mutate(score_control = 100 - md_age)
    
    score_summary_part2 <- score_summary_part1 %>% 
      dplyr::left_join(clinical %>% 
                  select(sr_guid, p_clinical, score_control), by = "sr_guid") 

    score_summary <- score_summary_part2 %>% 
      mutate(score_endpoint = score_cumulative_exposure * p_clinical^w_clinical * susceptible,
             endpoint_score_level = factor(if_else(score_endpoint >=40, "High", 
                                            if_else(score_endpoint >=19 & score_endpoint <40, 
                                                    "Moderate",
                                                    "Low"), missing = "Low"), 
                                           ordered = TRUE, 
                                           levels = c("Low", "Moderate", "High")))
    
    # final analysis data frame with all cleaned responses and model predictions
    response_predictions <- data %>% 
      left_join(score_summary %>% 
                  select(-susceptible, -risk_score_cover_h), 
                by = "sr_guid")
    
   return(list(exposures, clinical, score_summary, response_predictions))
}

model_dfs <- run_model(responses_clean, 
                       risk_ratio_variable = NULL, 
                       risk_ratio_value = NULL)

exposures <- model_dfs[[1]]

clinical <- model_dfs[[2]]

score_summary <- model_dfs[[3]]

response_predictions <- model_dfs[[4]]  

```

<br>

# Results

We developed a individual person-level cumulative endpoint risk score with four dimensions 
(home, community, work and transit), a relative risk of showing symptoms if infected, 
and a magic vaccine trial endpoint risk score that combines susceptibility, 
cumulative exposure, and risk of symptoms. 

```{r hist endpoint score levels}
ggplot(score_summary, aes(score_endpoint)) +
  geom_histogram(aes(fill = endpoint_score_level), alpha = .6, binwidth = 2) +
  xlab('Endpoint Risk Score') +
  ylab('Number of people in registry') +
  theme_bw() +
  scale_fill_manual(name = "Endpoint Risk", 
                    values = c("High" = "red", "Moderate" = "orange", "Low" = "gold"))
```

##### __Figure.__ Distribution of Endpoint Risk Score

<br>

```{r production in oracle}

# Run ORE SQL version that will be used for production in oracle
source('~/covpn/endpoint_production.R')
```

##### __Figure.__ Oracle production version of SQL query

### Population Characteristics

<br>

```{r baseline table}

baseline_df <- response_predictions

LOOKUP.T <- c('age_cat',
              'md_age',
              'race_black',
              'hispanic',
              'bmi_obese',
              'comorbidity_n',
              'any_work',
              'freq_work',
              'freq_work_increase',
              'job_risk_high',
              'job_risk_low',
              'travel_public_transit',
              'n_home_total',
              'caregiver',
              'home_schoolreturn',
              'freq_visitors',
              'n_social_intxn',
              'social_gathering',
              'n_gathering'
              )

NAMES <- c('Age, years',
           'Age, years',
           'Black or African American Race',
           'Hispanic or LatinX',
           'Obese, body mass index >30',
           'Number of comorbidities',
           'Working currently',
           'Frequency of work, average days per week',
           'Increasing frequency of work, added days per week in next 3 months',
           'High risk job function',
           'Low risk job function', 
           'Travels to work on public transit',
           'Number of people living in household',
           'Caregiver of child or elderly adult at home',
           'Lives with children returning to school in 2020',
           'Frequent visitors to household, daily or weekly',
           'Number of social interactions, average contacts per day',
           'Attended social gathering in past 2 weeks',
           'Size of recent social gathering, average number of people'
           )

table1 <- CreateBaselineTable(baseline_df = baseline_df, variable = 'endpoint_score_level')

export2md(table1,
          caption = "Table 1. Baseline characteristics of volunteers in the CoVPN Screening Registry, stratified by level of Endpoint Risk Score")

```


<br>

## New Vaccine Trial Enpoint Risk Score

The new proposed vaccine trial endpoint risk score is calculated as:

__score_endpoint = susceptible * score_cumulative_exposure * p_clinical^scaling_factor__

where susceptible is defined as having no prior 
RNA or antibody test with a "Positive" result; 
cumulative exposure includes the additive probabilities of being exposed at 
home, community, work, and transit; and p_clinical is the expected probability 
the individual would experience clinical symptoms of COVID disease
if infected, depending on age, race, ethnicity, BMI, and comorbidities. 


```{r fig exposure v cover_h, fig.height= 5, fig.width=8}
ggplot(score_summary, aes(score_cumulative_exposure, risk_score_cover_h)) +
  geom_jitter(alpha = .3, aes(color = score_endpoint)) +
  xlim(0,100) +
  xlab("Estimated infectious exposure in next 3 months") +
  ylab("Cover Score for Hospitalization if Infected") + 
  geom_vline(xintercept = 50, alpha = 0.5) + 
  geom_hline(yintercept = 50, alpha = 0.5) +
  geom_smooth(method = "lm", size = 1.5) +
  theme_bw() +
  scale_color_gradient(name = "Endpoint Score", 
                       low = "yellow", high = "red", na.value = NA)
```

##### __Figure.__ Estimated cumulative transmission exposure score compared to the Cover H score for hospitalization if infected, colored  by the final Endpoint Risk Score 

<br>

```{r exposure v p_clinical, fig.height= 3, fig.width=5}
ggplot(score_summary, aes(score_cumulative_exposure, p_clinical)) +
  geom_jitter(alpha = .3, aes(color = score_endpoint)) +
  xlim(0,100) +
  xlab("Estimated infectious exposure in next 3 months") +
  ylab("Probability of clinical symptoms if infected") + 
  geom_vline(xintercept = 50, alpha = 0.5) + 
  geom_hline(yintercept = .5, alpha = 0.5) +
  geom_smooth(method = "lm", size = 1.5) +
  theme_bw() +
  scale_color_gradient(name = "Endpoint Score", 
                       low = "yellow", high = "red", na.value = NA)
```

##### __Figure.__ Estimated cumulative transmission exposure score compared to the probability of showing symptoms, colored  by the final Endpoint Risk Score 

<br>

The distribution of magic endpoint risk scores can be described using percentiles. 
These percentiles may be considered in the future as thresholds to define levels
of exposure risk. 

##### __Table.__ Percentiles of endpoint risk score distribution

```{r percentiles of score}
quantile(score_summary$score_endpoint, c(.025, .25, .33, .5, .67, .75, .985))

score_summary_quantiles <- quantile(score_summary$score_endpoint, c(.025, .25, .33, .5, .67, .75, .985))

round(score_summary_quantiles, digits = 1) %>% 
  kable(format = "markdown")
```

<br>

We expect that patients who have been enrolled from the registry up to this point
are more likely than the average person in the registry to develop symptomatic 
COVID-19 disease in the next 3 months, attributed to the screening skills
of the clinical trial sites. We support this with evidence in the table below. 

##### __Table.__ Mean endpoint risk score by enrollment status

```{r score by enrollment, include = TRUE}
response_predictions %>% 
  dplyr::mutate(`Enrollment Status` = sr_status) %>% 
  dplyr::group_by(`Enrollment Status`) %>% 
  dplyr::summarise(`Mean Endpoint Risk Score` = round(mean(score_endpoint), digits = 1),
                   `Number of people` = n()) %>% 
  kable(format = "markdown")
```

<br>

### Cumulative Exposure

The cumulative exposure score measures the expected quantity of potentially infectious 
exposures in the next three months using the dimensions of home, community, work, and transit. 
The probability of having a meaningful exposure in each dimension is dependent on 
the number of unique contacts, intensity of contact (i.e., proximity and duration), and 
frequency of contacting. 

```{r fig hit dimensions exposure, fig.width = 8, fig.height = 3}
score_summary_long <- gather(data = score_summary, key = score, value = value, 
       score_home:risk_score_cover_h)  %>% 
  dplyr::mutate(Setting = "NA", 
                Setting = if_else(score == "score_home", "Household", Setting),
                Setting = if_else(score == "score_community", "Community", Setting),
                Setting = if_else(score == "score_work", "Work", Setting))

ggplot(score_summary_long %>% 
  filter(score == "score_home" | score == "score_community" |
                  score == "score_work"), aes(value, fill = Setting)) +
  geom_histogram(alpha = .9, binwidth = .05) +
  facet_wrap(~Setting) +
  xlab('Cumulative transmission exposure level') +
  ylab('Number of people in registry') +
  theme_bw()
```

##### __Figure.__ Histograms of community, home, work, and transit score that contribute to the cumulative exposure score

<br>

The probability of a meaningful infectious exposure at home, community, work, and transit in
the following three months is combined in the following way: 

`cumulative_exposure = beta_home * score_home + beta_work * score_work + beta_community * score_community`

where the relative weights of each exposure setting (beta coefficients) are defined in Table 1 and the scores for each setting are defined 
in the [analysis plan here](https://docs.google.com/document/d/1U6jhMBk66-rlcWUPsLwZ0iqvlL9puaQWhDhf1mVeK1w/edit#). 

<br>

```{r figure hist exposure, fig.height= 2, fig.width=5}
ggplot(score_summary, aes(score_cumulative_exposure)) +
  geom_histogram(fill = "black", alpha = .6, binwidth = 8) +
  xlab('Estimated cumulative transmission exposure score') +
  ylab('Number of people in registry') +
  theme_bw()
```

##### __Figure.__ Distribution of cumulative exposure score among people in the registry

<br>

```{r}
correlation_age_endpoint <- cor(response_predictions$score_endpoint, 
    response_predictions$md_age, 
    method = c("pearson", "kendall", "spearman"))
```

The Endpoint Risk Score is related to age with a correlation coefficient 
of `r round(correlation_age_endpoint, digits = 3)`. 

```{r figure age v exposure, fig.height= 3, fig.width=5}
ggplot(response_predictions, aes(md_age, score_cumulative_exposure)) +
  geom_jitter(alpha = .3, aes(color = score_endpoint)) +
  xlim(20, 85) +
  xlab("Age") +
  ylab("Estimated Transmission Exposure Score") + 
  geom_smooth(method = "lm", size = 2, se = TRUE) +
  theme_bw() +
  scale_color_gradient(name = "Endpoint Risk Score", 
                       low = "yellow", high = "red", na.value = NA)
  
```

##### __Figure.__ Assocation between age and estimated transmission exposure

<br>

```{r figure freq work v exposure, fig.height= 3, fig.width=5}
ggplot(response_predictions, aes(freq_work, score_cumulative_exposure)) +
  geom_jitter(alpha = .3, aes(color = score_endpoint)) +
  xlab("Frequency of Work (days per week in person)") +
  ylab("Estimated Transmission Exposure") + 
  theme_bw() +
  geom_smooth(method = "lm", size = 1.5, se = TRUE, aes(linetype = factor(job_risk_cat))) +
  scale_color_gradient(name = "Endpoint Risk Score", 
                       low = "yellow", high = "red", na.value = NA) + 
  scale_linetype(name = "Job Risk")
  
```

##### __Figure.__ Assocation between job function risk and estimated transmission exposure

<br>

```{r figure household number v exposure, fig.height= 3, fig.width=5}
ggplot(response_predictions, aes(n_home_total, score_cumulative_exposure)) +
  geom_jitter(alpha = .3, aes(color = score_endpoint)) +
  xlab("Number of people in household") +
  ylab("Estimated Transmission Exposure") + 
  ylim(0, 100) +
  geom_smooth(method = "lm", size = 1.5, se = TRUE, aes(linetype = factor(risky_home_setting))) +
  theme_bw() +
  scale_color_gradient(name = "Endpoint Risk Score", 
                       low = "yellow", high = "red", na.value = NA) + 
  scale_linetype(name = "High Risk Setting")
  
```

##### __Figure.__ Assocation between number of people living in household and estimated transmission exposure

<br>

#### Exposure compared to risk of hospitalization if infected

```{r figure cover v exposure, fig.height= 3, fig.width=5}
ggplot(score_summary, aes(risk_score_cover_h, score_cumulative_exposure,)) +
  geom_jitter(alpha = .3, aes(color = score_endpoint)) +
  ylim(0,100) +
  xlab("Cover Score for Hospitalization") +
  ylab("Estimated transmission exposure risk") + 
  geom_vline(xintercept = 50, alpha = .5) + 
  geom_hline(yintercept = 50, alpha = .5) +
  geom_smooth(method = "lm", size = 2.5, se = TRUE) +
  theme_bw() +
  scale_color_gradient(name = "Endpoint risk score", 
                       low = "yellow", high = "red", na.value = NA)
  
```

##### __Figure.__ Endpoint risk score vs Cover score for hospitalization if infected

<br>

```{r figure age and work v endpoint, fig.height= 3, fig.width=5}
ggplot(response_predictions, aes(age, score_endpoint,)) +
  geom_jitter(alpha = .3, aes(color = freq_work)) +
  xlim(20, 85) +
  ylim(0,100) +
  xlab("Age") +
  ylab("Estimated transmission exposure risk") + 
  geom_vline(xintercept = 50, alpha = .5) + 
  geom_hline(yintercept = 50, alpha = .5) +
  geom_smooth(method = "lm", size = 2.5, se = TRUE, color = "orange") +
  theme_bw() +
  scale_color_gradient(name = "Work days per week", 
                       low = "blue", high = "yellow", na.value = NA)
  
```

##### __Figure.__ Age, average in-person work days per week, and endpoint risk score


### Clinical risk of COVID symptoms

The clinical risk score reflects the probability of showing relative risk of showing mild-moderate COVID symptoms if 
infected in the next 3 months compared to an average person who is age 50-59 years, 
non-hispanic, not Black, normal weight, with no comorbidities and no history of cancer. 
This relative risk, or clinical risk score, is calculated as:

`p_clinical = logit(symptoms|infected) = exp(alpha_clinical + beta_age18 * age18 +`
`beta_age40 * age_40 + beta_age60 * age60 + beta_age70 * age_70 + beta_age80 * age80 +`
`beta_race_black * race_black + beta_hispanic * hispanic +`
`beta_bmi_overweight * bmi_overweight + beta_bmi_obese * bmi_obese +`
`beta_comorbidities_n * comorbidities_n + beta_cancer * cancer)`

where each beta coefficient is the natural log of the corresponding odds ratios 
for each variable provided in Table 1. The clinical risk score reflects 
the relative likelihood of showing least mild 
symptoms if infected (clinical risk score = p_clinical * 100). 

<br>

```{r figure hist p_clinical, fig.height= 2, fig.width=5}
ggplot(score_summary, aes(p_clinical)) +
  geom_histogram(fill = "black", alpha = .6, binwidth = .08) +
  xlab('Probability of clinical symptoms if infected') +
  ylab('Number of people in registry') +
  xlim(0,1) +
  theme_bw()
```

##### __Figure.__ Distribution of probability of showing clinical symptoms if infected

<br>

We transform the probability of clinical symptoms if infected by exponentiating
to the power of `r w_clinical` to attenuate the contribution of clinical symptoms
on the final Endpoint Risk Score in its contribution with the estimated 
transmission risk score. Below is a figure showing the distribution of the 
transformed clnical symptoms that is multiplied by the tranmission risk score. 

```{r figure hist transformed p_clinical, fig.height= 2, fig.width=5}
ggplot(score_summary, aes((p_clinical^w_clinical))) +
  geom_histogram(fill = "black", alpha = .6, binwidth = .05) +
  xlab('Probability of clinical symptoms if infected') +
  ylab('Number of people in registry') +
  xlim(0,1) +
  theme_bw()
```

##### __Figure.__ Transformed distribution of clinical symptom risk score for interaction with exposure to generate Endpoint Risk Score

<br>

To assess the face validity of our estiamted probability of developing 
clinical symptoms, we expect people of older age and people who are obese 
to be more likely to show symptoms than younger people and people who are not 
obese. 

The color scale for work represents the average number of days per week that the 
individual is working in person at the time of responding to the survey
We are particularly interested in the emphasis on the older age group 
e.g. > 65 who are being targeted.

```{r figure age v p_clinical, fig.height= 3, fig.width=5}
ggplot(response_predictions, aes(md_age, p_clinical)) +
  geom_jitter(alpha = .3, aes(color = score_endpoint)) +
  xlim(20,85) +
  xlab("Age") +
  ylab("Probability of Symptoms if Infected") + 
  geom_smooth(method = "lm", size = 1.5, se = TRUE, aes(linetype = factor(bmi_obese))) +
  theme_bw() +
  scale_color_gradient(name = "Endpoint Risk Score", 
                       low = "yellow", high = "red", na.value = NA) + 
  scale_linetype(name = "Obese")
  
```

##### __Figure.__ Age, obesity, and the estimated probability of developing clinical symptoms if infected

<br>


Below the new cliniccal risk 
score is compared to
the Cover score H representing risk of hospitalization if infected. 

```{r figure comorbidity v p_clinical, fig.height= 3, fig.width=5}
ggplot(response_predictions, aes(comorbidity_n, p_clinical)) +
  geom_jitter(alpha = .3, aes(color = score_endpoint)) +
  xlim(0, 5) +
  xlab("Number of comorbidities") +
  ylab("Probability of clinical symptoms if infected") + 
  geom_smooth(method = "lm", size = 2, se = TRUE, aes(linetype = age_over65)) +
  theme_bw() +
  scale_color_gradient(name = "Endpoint Risk Score", 
                       low = "yellow", high = "red", na.value = NA)
  
```

##### __Figure.__ Assocation between comorbidities and probability of clinical symptoms if infected, by age >= or < 65 years

<br>

<br>

### Sensitivity Analysis 

In this section we conduct a one-way sensitivity analysis to understand the 
influence of the input values assumed for risk ratios. These assumptions 
were based on peer-reviewed literature, evidence synthesis, and expert opinions 
that were available at the time of analysis. 
There is great uncertainty about the association of risk factors at home, 
work, in the community, and transportation in relation to the likelihood of becoming
infected and developing symptomatic covid disease. In this one-way sensitivity 
analysis, we re-run the calculuations at the upper and lower ranges of uncertainty 
for each model input to understand the influence of uncertainty on the mean
Endpoint Risk Score. 

```{r sensitivity analysis, , fig.height= 8, fig.width=8}

# helper functions for tornado diagram and marginal effects analysis

gen_risk_scores <- function(dict, df, data){
  # Generate risk scores for each person in the registry
  # @params
  
  
   for (row in 1:nrow(dict)){
      variable_name <- dict$variable_name[row]
      for (i in c("lower_bound", "upper_bound")){
        
         risk_score <- run_model(data, variable_name, dict[i][row,])[[4]][c("sr_guid", "score_endpoint")]
         
         col_name <- paste("score_endpoint", paste(variable_name, i, sep="_"), sep="_")
         
         colnames(risk_score) <- c('sr_guid', col_name)
         
         df <- df %>% 
            dplyr::left_join(risk_score %>% 
                                select(sr_guid, col_name), by = "sr_guid") 
      }
   }
   return(df)
}

gen_df_for_plotting <- function(dict, plot_df, risk_scores_df){
  # Generate dataframe for plotting
  
   for (i in dict$variable_name){
      prefix <- paste("score_endpoint", i, sep="_")
      # lower bound column
      lb_col <- paste(prefix, "lower_bound", sep="_")
      lb_mean <- mean(risk_scores_df[lb_col][,])
      # upper bound column
      ub_col <- paste(prefix, "upper_bound", sep="_")
      ub_mean <-  mean(risk_scores_df[ub_col][,])
      plot_df <- rbind(plot_df, data.frame(variable_name=c(i),
                                           lower_bound=c(lb_mean),
                                           upper_bound=c(ub_mean)))
   }
   return(plot_df)
}

# Generate risk scores and plot data for tornado diagram 


# create dataframe to patient-level risk scores for different OR values
td_raw_data <- data.frame(responses_clean$sr_guid)
colnames(td_raw_data) <- ('sr_guid')

# generate risk scores 
td_risk_scores <- gen_risk_scores(or_dict, td_raw_data, responses_clean)

# generate mean value for each bound and OR variable
# create dataframe to store aggregate for tornado diagram
td_plot <- data.frame(matrix(ncol = 3, nrow = 0))
x <- c("variable_name", "lower_bound", "upper_bound")
colnames(td_plot) <- x

td_plot <- gen_df_for_plotting(or_dict, td_plot, td_risk_scores)


# prepare data for diagram
#(code source: https://stackoverflow.com/questions/55751978/tornado-both-sided-
# horizontal-bar-plot-in-r-with-chart-axes-crosses-at-a-given)

td_plot<-td_plot[c('variable_name', 'lower_bound', 'upper_bound')]
td_plot$ul_diff <- td_plot$upper_bound - td_plot$lower_bound

current_model_mean <- mean(run_model(responses_clean)[[4]][['score_endpoint']])

risk_ratio_variable_levels <- td_plot %>% arrange(ul_diff) %>%
   mutate(variable_name=factor(x=variable_name, levels=variable_name)) %>%
   select(variable_name) %>% unlist() %>% levels()

td_plot_2 <- td_plot %>% 
   gather(key='type', value='output.value', lower_bound:upper_bound) %>%
   select(variable_name, type, output.value, ul_diff) %>%
   mutate(variable_name=factor(variable_name, levels=risk_ratio_variable_levels),
          ymin=pmin(output.value, current_model_mean),
          ymax=pmax(output.value, current_model_mean),
          xmin=as.numeric(variable_name)-0.95/2,
          xmax=as.numeric(variable_name)+0.95/2)

td_plot_2 <- td_plot_2 %>% 
   dplyr::left_join(or_dict %>% 
                       select(variable_name, lower_bound, upper_bound), by = "variable_name") 

ggplot() + 
   geom_rect(data = td_plot_2, 
             aes(ymax=ymax, ymin=ymin, xmax=xmax, xmin=xmin, fill=type)) +
   geom_text(data = td_plot_2[td_plot_2$type == "lower_bound",], 
             aes(x =(xmin+.5), y =ymin-.5, label=lower_bound), size=3) +
   geom_text(data = td_plot_2[td_plot_2$type == "upper_bound",], 
             aes(x =(xmax-.5), y =ymax+.5, label=upper_bound), size=3) +
   theme_bw() + 
   theme(axis.title.y=element_blank(), legend.position = 'bottom',
         legend.title = element_blank()) + 
   geom_hline(yintercept = current_model_mean) +
   scale_x_continuous(breaks = c(1:length(risk_ratio_variable_levels)), 
                      labels = risk_ratio_variable_levels) +
   labs( title= "One way sensitivity analysis", y="Mean Endpoint Risk Score") +
   coord_flip()
```

##### __Figure.__ Tornado diagram of one-way sensitivity analysis examining the impact of upper and lower ranges for inputs values

<br>

#### Marginal effects

In this section we evaluate the potential influence of specific survery question
responses on the final Endpoint Risk Score. We do this by estimating the 
marginal effects of survey response inputs. For each survey response item that 
is used to inform the Endpoint Risk Score, we re-run 
the calculations as if everyone in the population had given the minimum value of response 
and then re-run it again as if everyone had responded with the max value. 
We then calculate the marginal effect of a response item by comparing the 
difference between the mean Endpoint Risk Score at the minimum value to the mean 
Endpoint Risk score at the maximum value. The responses with the largest incremental 
change in Endpoint Risk Score are the biggest drivers of the likelihood o
becomeing infected and showing clinical symtoms in the following three months. 

```{r marginal effects, fig.height= 8, fig.width=8}
# Generate risk scores and plot data for marginal effects plot
model_variables_dict <- data.frame(variable_name = c("freq_work",
                           "freq_work_increase", 
                           "job_risk_high",
                           "job_risk_low",
                           "work_unsafe_distance",
                           "work_unsafe_masks",
                           "wfh_only",
                           "n_work_interactions",
                           "risky_home_setting",
                           "high_partner_risk", 
                           "n_home_young",
                           "n_home_middle",
                           "n_home_older",
                           "home_schoolreturn",
                           "outside_childcare",
                           "caregiver",
                           "freq_visitors",
                           "social_gathering",
                           "n_social_intxn",
                           "n_gathering",
                           "indoor_gathering",
                           "travel_public_transit",
                           "race_black",
                           "hispanic",
                           "age_18",
                           "age_40",
                           "age_50",
                           "age_60",
                           "age_70",
                           "age_80", 
                           "bmi_overweight", 
                           "bmi_obese",
                           "comorbidity_n", 
                           "cancer"), stringsAsFactors = FALSE)

model_variables_dict$lower_bound <- sapply(model_variables_dict$variable_name, function(x) min(responses_clean[x]))
model_variables_dict$upper_bound <- sapply(model_variables_dict$variable_name, function(x) max(responses_clean[x]))

# create dataframe to patient-level risk scores for different OR values
me_raw_data <- data.frame(responses_clean$sr_guid)
colnames(me_raw_data) <- ('sr_guid')

# generate risk scores 
me_risk_scores <- gen_risk_scores(model_variables_dict, me_raw_data, responses_clean)

# generate mean value for each bound and OR variable
# create dataframe to store aggregate for tornado diagram
me_plot <- data.frame(matrix(ncol = 3, nrow = 0))
x <- c("variable_name", "lower_bound",  "upper_bound")
colnames(me_plot) <- x

me_plot <- gen_df_for_plotting(model_variables_dict, me_plot, me_risk_scores)

me_plot$diff <- me_plot$upper_bound - me_plot$lower_bound
me_plot$absdiff <- abs(me_plot$diff)

ggplot(data=me_plot, aes(x = reorder(variable_name, absdiff), 
                                                    y = diff)) +
  geom_bar(stat="identity") +  
  coord_flip() +
  xlab("Survey Response") + 
  ylab("Marginal Effect (difference in mean score)") + 
  theme_bw()

```

##### __Figure.__ Marginal effects of survey response variable min and max on the mean Endpoint Risk Score


# Discussion

The vaccine endpoint risk score developed here may be a useful tool to enrich the 
population assessed for enrollment.

<br>

## APPENDIX

<br>

### Evaluation of driving features using linear regression 
_What are the main volunteer characteristics that are driving the Endpoint Risk Score?_ 

The linear regression below evaluates the relationship between the 
dimensions of the exposure score and the probability of experiencing
clinical symptoms with the estimated Endpoint Risk Score. 

```{r linear regression dimensions}
fit <- glm(score_endpoint ~ score_home + score_community + 
             score_work + p_clinical, 
           data = response_predictions)

summary(fit)
```

The linear regression results below show the relationship between a one unit
change in each model feature with the assocaited increase or decrease
change in the Endpoint Risk Score outcome (max 100 points possible), 
while holding all other model features constant. 
As expected based on the odds ratio inputs used, this sensitivity anlaysis 
shows that Black race and Hispanic ethnicity have a meaningfully large contribution. 
Other key drivers of the Endpoint Risk Score outcome are the number of social interactions,
attendance at indoor gatherings, riskiness of job, and obesity are main drivers. 

```{r linear regression variables}

fit <- glm(score_endpoint ~ md_age + comorbidity_n + cancer +
             bmi_overweight + bmi_obese +
             race_black + hispanic +
             freq_work + freq_work_increase +
             job_risk_high + job_risk_low +
             n_home_young + n_home_middle + n_home_older +
             home_schoolreturn + freq_visitors +
             n_social_intxn + n_gathering + indoor_gathering +
             travel_bus + travel_train + travel_plane, 
           data = response_predictions)

summary(fit)
```



```{r figure exposure v clinical by age}
ggplot(response_predictions, aes(score_cumulative_exposure, p_clinical)) +
  geom_jitter(alpha = .3, aes(color = age)) +
  xlim(0,100) +
  xlab("Cumulative exposure score") +
  ylab("Probability of symptoms if infected") + 
  geom_vline(xintercept = 50) + geom_hline(yintercept = .5) +
  theme_bw() +
  scale_color_gradient(name = "Age", 
                       low = "grey", high = "blue", na.value = NA)
```

##### __Figure.__ Exploratory evaluation of exposure vs clinical scores

<br>

<br>

***

### R Session Information

The following information describes the R package versions 
that were used in this analysis. 

<br>

```{r}
sessionInfo()
```

